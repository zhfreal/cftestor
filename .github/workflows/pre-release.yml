name: Release

on:
  release:
    types: [prereleased]

jobs:
  build:
    strategy:
      matrix:
        # Include amd64 on all platforms.
        goos: [windows, linux]
        goarch: [amd64, 386]
        include:
          # BEGIN Linux ARM 5 6 7 64
          - goos: linux
            goarch: arm
            goarm: 7
          - goos: linux
            goarch: arm
            goarm: 6
          - goos: linux
            goarch: arm
            goarm: 5
          - goos: linux
            goarch: arm64
          # END Linux ARM 5 6 7 64
          # END Other architectures
      fail-fast: false

    runs-on: ubuntu-latest
    env:
      GOOS: ${{ matrix.goos }}
      GOARCH: ${{ matrix.goarch }}
      GOARM: ${{ matrix.goarm }}
      CGO_ENABLED: 1

    steps:
      - name: Checkout codebase
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Install toolchains
        run:  |
          sudo apt install gcc gcc-i686-linux-gnu  gcc-arm-linux-gnueabi gcc-aarch64-linux-gnu gcc-mingw-w64 gcc-mingw-w64-i686 gcc-mingw-w64-x86-64 -y
          mkdir -p dist
          echo "CGO_ENABLED=1" >> $GITHUB_ENV

      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: ^1.18

      - name: Get project dependencies
        run: go mod download

      - name: Prepare for Build
        if: ${{ ($GOOS == 'windows') && ($GOARCH == 'amd64') }}
        run: |
          echo "CC=/usr/bin/x86_64-w64-mingw32-gcc" >> $GITHUB_ENV
          echo "PREFIX=cftestor-windows-amd64" >> $GITHUB_ENV
          echo "BINARY=dist/$PREFIX.exe" >> $GITHUB_ENV
        if: ${{ ($GOOS == 'windows') && ($GOARCH == '386') }}
        run: |
          echo "CC=/usr/bin/i686-w64-mingw32-gcc" >> $GITHUB_ENV
          echo "PREFIX=cftestor-windows-x86" >> $GITHUB_ENV
          echo "BINARY=dist/$PREFIX.exe" >> $GITHUB_ENV
        if: ${{ ($GOOS == 'linux') && ($GOARCH == 'amd64') }}
        run: |
          echo "CC=/usr/bin/x86_64-linux-gnu-gcc" >> $GITHUB_ENV
          echo "PREFIX=cftestor-linux-amd64" >> $GITHUB_ENV
          echo "BINARY=dist/$PREFIX" >> $GITHUB_ENV
        if: ${{ ($GOOS == 'linux') && ($GOARCH == '386') }}
        run: |
          echo "CC=/usr/bin/i686-linux-gnu-gcc" >> $GITHUB_ENV
          echo "PREFIX=cftestor-linux-x86" >> $GITHUB_ENV
          echo "BINARY=dist/$PREFIX" >> $GITHUB_ENV
        if: ${{ ($GOOS == 'linux') && ($GOARCH == 'arm64') }}
        run: |
          echo "CC=/usr/bin/aarch64-linux-gnu-gcc" >> $GITHUB_ENV
          echo "PREFIX=cftestor-linux-arm64" >> $GITHUB_ENV
          echo "BINARY=dist/$PREFIX" >> $GITHUB_ENV
        if: ${{ ($GOOS == 'linux') && ($GOARCH == 'arm[567]') }}
        run: |
          echo "CC=/usr/bin/arm-linux-gnueabi-gcc" >> $GITHUB_ENV
          echo "PREFIX=cftestor-linux-$GOARCH" >> $GITHUB_ENV
          echo "BINARY=dist/$PREFIX" >> $GITHUB_ENV

      - name: Show workflow information
        run: |
          echo "GOOS: $GOOS, GOARCH: $GOARCH, GOARM: $GOARM, RELEASE_NAME: $BINARY"

      - name: Build
        run: |
          go build -v -o $BINARY -trimpath -ldflags "-s -w -buildid=" ..

      - name: Create ZIP archive
        run: |
          zip -9vr dist/$PREFIX.zip $BINARY
          DGST=$PREFIX.dgst
          cd dist
          openssl dgst -md5    $PREFIX.zip | sed 's/([^)]*)//g' >>$DGST
          openssl dgst -sha1   $PREFIX.zip | sed 's/([^)]*)//g' >>$DGST
          openssl dgst -sha256 $PREFIX.zip | sed 's/([^)]*)//g' >>$DGST
          openssl dgst -sha512 $PREFIX.zip | sed 's/([^)]*)//g' >>$DGST
          cd ..

      - name: Upload files to GitHub release
        uses: svenstaro/upload-release-action@v2
        if: github.event_name == 'release'
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file_glob: true
          file: |
            dist/$PREFIX.zip
            dist/$PREFIX.dgst
          tag: ${{ github.ref }}
