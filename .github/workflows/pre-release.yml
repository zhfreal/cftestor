name: Release

on:
  release:
    types: [prereleased]

jobs:
  build:
    strategy:
      matrix:
        # enbale windows linux darwin freebsd on amd64, arm64
        goos: [windows, linux, darwin, freebsd]
        goarch: [amd64]
        goamd64: [v1, v3]
        include:
          # include linux on arm5, arm6, arm7, 386, riscv64
          - goos: linux
            goarch: arm
            goarm: 7
          - goos: linux
            goarch: arm
            goarm: 6
          - goos: linux
            goarch: arm
            goarm: 5
          - goos: linux
            goarch: 386
          - goos: linux
            goarch: riscv64
          - goos: windows
            goarch: arm64
          - goos: linux
            goarch: arm64
          - goos: darwin
            goarch: arm64
          - goos: freebsd
            goarch: arm64
      fail-fast: false

    runs-on: ubuntu-latest
    env:
      RELEASE_VERSION: ${{ github.ref_name }}
      GOOS: ${{ matrix.goos }}
      GOARCH: ${{ matrix.goarch }}
      GOARM: ${{ matrix.goarm }}
      GOAMD64: ${{ matrix.goamd64 }}
      CGO_ENABLED: 0
      BUILDHASH: ${{ github.sha }}

    steps:
      - name: Set BUILDDATE and BUILDTAG
        run: |
          echo "BUILDDATE=$(date -u +'%Y-%m-%d %H:%M:%S +0000')" >> $GITHUB_ENV
          echo "BUILDTAG=release, by zhfreal" >> $GITHUB_ENV

      - name: Checkout codebase
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22'

      - name: Get project dependencies
        run: go mod download
        
      - name: Prepare for Build
        run: |
          echo "BINARY=cftestor-${GOOS}-${GOARCH}${GOARM}" >> $GITHUB_ENV

      - name: Prepare for x86
        if: ${{ matrix.goarch == '386' }}
        run: |
          echo "BINARY=$(echo ${BINARY} | sed 's/386/x86/')" >> $GITHUB_ENV

      - name: Prepare for amd64 v3
        if: ${{ matrix.goarch == 'amd64' }} && ${{ matrix.goamd64 == 'v3' }}
        run: |
          echo "BINARY=${BINARY}v3" >> $GITHUB_ENV

      - name: Prepare for Build windows
        if: ${{ matrix.goos == 'windows' }}
        run: |
          echo "BINARY=${BINARY}.exe" >> $GITHUB_ENV

      - name: Show workflow information
        run: |
          if [ -n "${GOARM}" ]; then
            echo "GOOS: ${GOOS}, GOARCH: ${GOARCH}, GOARM: ${GOARM}, RELEASE_VERSION: ${RELEASE_VERSION}, RELEASE_NAME: ${BINARY}"
          elif [ -n "${GOAMD64}" ] && [ "${GOARCH}" == "amd64" ]; then
            echo "GOOS: ${GOOS}, GOARCH: ${GOARCH}, GOAMD64: ${GOAMD64}, RELEASE_VERSION: ${RELEASE_VERSION}, RELEASE_NAME: ${BINARY}"
          else
            echo "GOOS: ${GOOS}, GOARCH: ${GOARCH}, RELEASE_VERSION: ${RELEASE_VERSION}, RELEASE_NAME: ${BINARY}"
          fi

      - name: Build
        run: |
          mkdir -p dist
          LDFLAGS="-s -w -buildid= \
                   -X 'main.version=${RELEASE_VERSION}' \
                   -X 'main.buildDate=${BUILDDATE}' \
                   -X 'main.buildTag=${BUILDTAG}' \
                   -X 'main.buildHash=${BUILDHASH}'"
          go build -o dist/${BINARY} -v -trimpath -ldflags "${LDFLAGS}" .

      - name: Create ZIP archive
        run: |
          cd dist
          PREFIX=${BINARY}
          [ "$GOOS" == 'windows' ] && PREFIX=$(echo ${BINARY} | sed 's/\.exe$//')
          zip -9vr ${PREFIX}.zip ${BINARY}
          rm ${BINARY}
          DGST=${PREFIX}.dgst
          for t in md5 sha1 sha256 sha512; do
            openssl dgst -${t} ${PREFIX}.zip | sed 's/([^)]*)= \+/\t/' >> ${PREFIX}.zip.dgst
          done
          cd ..

      - name: Upload files to GitHub release
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file_glob: true
          overwrite: true
          file: ./dist/cftestor-*
          tag: ${{ github.ref }}
