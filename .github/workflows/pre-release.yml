name: Release

on:
  release:
    types: [prereleased]

jobs:
  build:
    strategy:
      matrix:
        # enbale windows linux darwin freebsd on amd64, arm64
        goos: [windows, linux, darwin, freebsd]
        goarch: [amd64, arm64]
        include:
          # include linux on arm5, arm6, arm7, 386, riscv64
          - goos: linux
            goarch: arm
            goarm: 7
          - goos: linux
            goarch: arm
            goarm: 6
          - goos: linux
            goarch: arm
            goarm: 5
          - goos: linux
            goarch: 386
          - goos: linux
            goarch: riscv64
        exclude:
          # exclude darwin on 386
          # - goos: darwin
          #   goarch: 386
          # - goos: windows
          #   goarch: 386
      fail-fast: false

    runs-on: ubuntu-latest
    env:
      RELEASE_VERSION: ${{ github.ref_name }}
      GOOS: ${{ matrix.goos }}
      GOARCH: ${{ matrix.goarch }}
      GOARM: ${{ matrix.goarm }}
      CGO_ENABLED: 0

    steps:
      - name: Checkout codebase
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: ^1.19

      - name: Get project dependencies
        run: go mod download
        
      - name: Prepare for Build
        run: |
          echo "BINARY=cftestor-${GOOS}-${GOARCH}${GOARM}" >> $GITHUB_ENV

      - name: Prepare for Build windows
        if: ${{ matrix.goos == 'windows' }}
        run: |
          echo "BINARY=${BINARY}.exe" >> $GITHUB_ENV

      - name: Prepare for x86
        if: ${{ matrix.goarch == '386' }}
        run: |
          echo "BINARY=$(echo ${BINARY} | sed 's/386/x86/')" >> $GITHUB_ENV

      - name: Show workflow information
        run: |
          if [ -n "${GOARM}" ]; then
            echo "GOOS: ${GOOS}, GOARCH: ${GOARCH}, GOARM: ${GOARM}, RELEASE_VERSION: ${RELEASE_VERSION}, RELEASE_NAME: ${BINARY}"
          else
            echo "GOOS: ${GOOS}, GOARCH: ${GOARCH}, RELEASE_VERSION: ${RELEASE_VERSION}, RELEASE_NAME: ${BINARY}"
          fi

      - name: Build
        run: |
          mkdir -p dist
          go build -v -o dist/${BINARY} -trimpath -ldflags "-s -w -buildid= -X main.version=${RELEASE_VERSION}" .

      - name: Create ZIP archive
        run: |
          cd dist
          PREFIX=${BINARY}
          [ "$GOOS" == 'windows' ] && PREFIX=$(echo ${BINARY} | sed 's/\.exe$//')
          zip -9vr ${PREFIX}.zip ${BINARY}
          rm ${BINARY}
          DGST=${PREFIX}.dgst
          for t in md5 sha1 sha256 sha512; do
            openssl dgst -${t} ${PREFIX}.zip | sed 's/([^)]*)= \+/\t/' >> ${PREFIX}.zip.dgst
          done
          cd ..

      - name: Upload files to GitHub release
        uses: svenstaro/upload-release-action@v2
        if: github.event_name == 'release'
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file_glob: true
          overwrite: true
          file: ./dist/cftestor-*
          tag: ${{ github.ref }}
